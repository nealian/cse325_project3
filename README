SANIC TEEM - Rob Kelly and Ian Neal
CSE325
Lab Project 3


The SANIC TEEM Producer / Consumer Experiment For Great Good, hereafter called "the program", is a multithreaded program designed solely to explore multithreaded programming and all the inherent synchronization problems that arise.  The program uses a shared buffer created by the main thread, and then spawns new producer and consumer threads that add to and remove from that buffer, respectively.  It takes three arguments: the number of producers, the number of consumers, and whether to use a First In Last Out style queue (usually called a stack) for the buffer (the alternative is First In First Out, or a standard queue).  The main thread will wait a full five minutes to exit, as per the specifications.  Of note is that, since one can specify more producers than consumers, not every generated element is consumed, and since one can specify more consumers than producers, a few producers might be hanging waiting for elements that will never be generated. These threads are cancelled and cleaned up after the 5-minute sleep.


The program may be compiled with the `make` directive.  Additionally, some basic tests may be run with the `make test` directive.


Examples:
$ ./p3 9 9 1
item 1641842837 added by producer 9: buffer = [ 1641842837 ]
item 637720115 added by producer 3: buffer = [ 1641842837 637720115 ]
item 870321783 added by producer 5: buffer = [ 1641842837 637720115 870321783 ]
item 1641842837 removed by consumer 3: buffer = [ 637720115 870321783 ]
item 318115712 added by producer 6: buffer = [ 637720115 870321783 318115712 ]
item 637720115 removed by consumer 4: buffer = [ 870321783 318115712 ]
item 870321783 removed by consumer 9: buffer = [ 318115712 ]
item 318115712 removed by consumer 7: buffer = [ ]
item 1888302653 added by producer 8: buffer = [ 1888302653 ]
item 1888302653 removed by consumer 8: buffer = [ ]
item 674048658 added by producer 2: buffer = [ 674048658 ]
item 2027036585 added by producer 1: buffer = [ 674048658 2027036585 ]
item 674048658 removed by consumer 2: buffer = [ 2027036585 ]
item 2027036585 removed by consumer 1: buffer = [ ]
item 1108004868 added by producer 4: buffer = [ 1108004868 ]
item 950965903 added by producer 7: buffer = [ 1108004868 950965903 ]
item 1108004868 removed by consumer 5: buffer = [ 950965903 ]
item 950965903 removed by consumer 6: buffer = [ ]
$ ./p3 1 2 0
item 1585306676 added by producer 1: buffer = [ 1585306676 ]
item 1585306676 removed by consumer 2: buffer = [ ]
$ ./p3 4 1 1
item 84723030 added by producer 1: buffer = [ 84723030 ]
item 84723030 removed by consumer 1: buffer = [ ]
item 1968217209 added by producer 2: buffer = [ 1968217209 ]
item 33629377 added by producer 4: buffer = [ 1968217209 33629377 ]
item 358950373 added by producer 3: buffer = [ 1968217209 33629377 358950373 ]


(Easter eggs! For extra fun, try running the program with big numbers; semaphores (and a mutex internal to the queue) keep the buffer from overfilling, since sem_wait is blocking and so is mutex_lock.)
