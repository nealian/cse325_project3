SANIC TEEM - Rob Kelly and Ian Neal
CSE325
Lab Project 3


The SANIC TEEM Producer / Consumer Experiment For Great Good, hereafter called "the program", is a multithreaded program designed solely to explore multithreaded programming and all the inherent synchronization problems that arise.  The program uses a shared buffer created by the main thread, and then spawns new producer and consumer threads that add to and remove from that buffer, respectively.  It takes three arguments: the number of producers, the number of consumers, and whether to use a First In Last Out style queue (usually called a stack) for the buffer (the alternative is First In First Out, or a standard queue).  The main thread will wait a full five minutes to exit, as per the specifications.  Of note is that, since one can specify more producers than consumers, not every generated element is consumed, and since one can specify more consumers than producers, a few producers might be hanging waiting for elements that will never be generated. These threads are cancelled and cleaned up after the 5-minute sleep.


The program may be compiled with the `make` directive.  Additionally, some basic tests may be run with the `make test` directive.


Examples:
  $ ./p3 9 9 1
  item 1858107848 added by producer 2: buffer = [ 1858107848 ]
  item 1858107848 removed by consumer 5: buffer = [ ]
  item 593819124 added by producer 4: buffer = [ 593819124 ]
  item 593819124 removed by consumer 7: buffer = [ ]
  item 218603148 added by producer 1: buffer = [ 218603148 ]
  item 218603148 removed by consumer 8: buffer = [ ]
  item 1425938399 added by producer 7: buffer = [ 1425938399 ]
  item 1200801987 added by producer 5: buffer = [ 1425938399 1200801987 ]
  item 1020928305 added by producer 9: buffer = [ 1425938399 1200801987 1020928305 ]
  item 271728317 added by producer 3: buffer = [ 1425938399 1200801987 1020928305 271728317 ]
  item 271728317 removed by consumer 9: buffer = [ 1425938399 1200801987 1020928305 ]
  item 1020928305 removed by consumer 4: buffer = [ 1425938399 1200801987 ]
  item 1693828948 added by producer 8: buffer = [ 1425938399 1200801987 1693828948 ]
  item 1373493830 added by producer 6: buffer = [ 1425938399 1200801987 1693828948 1373493830 ]
  item 1373493830 removed by consumer 2: buffer = [ 1425938399 1200801987 1693828948 ]
  item 1693828948 removed by consumer 3: buffer = [ 1425938399 1200801987 ]
  item 1200801987 removed by consumer 1: buffer = [ 1425938399 ]
  item 1425938399 removed by consumer 6: buffer = [ ]

  $ ./p3 1 2 0
  item 1585306676 added by producer 1: buffer = [ 1585306676 ]
  item 1585306676 removed by consumer 2: buffer = [ ]

  $ ./p3 4 1 1
  item 1050311717 added by producer 2: buffer = [ 1050311717 ]
  item 1050311717 removed by consumer 1: buffer = [ ]
  item 500374754 added by producer 1: buffer = [ 500374754 ]
  item 1423504565 added by producer 3: buffer = [ 500374754 1423504565 ]
  item 1463404585 added by producer 4: buffer = [ 500374754 1423504565 1463404585 ]

(Easter eggs! For extra fun, try running the program with big numbers; semaphores (and a mutex internal to the queue) keep the buffer from overfilling, since sem_wait is blocking and so is mutex_lock.)
